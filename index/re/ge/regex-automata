{"name":"regex-automata","vers":"0.1.10","deps":[{"name":"bstr","req":"^0.2","features":["std"],"optional":false,"default_features":false,"target":null,"kind":"dev","package":null},{"name":"fst","req":"^0.4.0","features":[],"optional":true,"default_features":true,"target":null,"kind":null,"package":null},{"name":"lazy_static","req":"^1.2.0","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null},{"name":"regex","req":"^1.1","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null},{"name":"regex-syntax","req":"^0.6.16","features":[],"optional":true,"default_features":true,"target":null,"kind":null,"package":null},{"name":"serde","req":"^1.0.82","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null},{"name":"serde_bytes","req":"^0.11","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null},{"name":"serde_derive","req":"^1.0.82","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null},{"name":"toml","req":"^0.4.10","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null}],"cksum":"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132","features":{"default":["std"],"fst":["dep:fst"],"regex-syntax":["dep:regex-syntax"],"std":["regex-syntax"],"transducer":["fst","std"]},"yanked":false}
{"name":"regex-automata","vers":"0.4.9","deps":[{"name":"aho-corasick","req":"^1.0.0","features":[],"optional":true,"default_features":false,"target":null,"kind":null,"package":null},{"name":"anyhow","req":"^1.0.69","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null},{"name":"bstr","req":"^1.3.0","features":["std"],"optional":false,"default_features":false,"target":null,"kind":"dev","package":null},{"name":"doc-comment","req":"^0.3.3","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null},{"name":"env_logger","req":"^0.9.3","features":["atty","humantime","termcolor"],"optional":false,"default_features":false,"target":null,"kind":"dev","package":null},{"name":"log","req":"^0.4.14","features":[],"optional":true,"default_features":true,"target":null,"kind":null,"package":null},{"name":"memchr","req":"^2.6.0","features":[],"optional":true,"default_features":false,"target":null,"kind":null,"package":null},{"name":"quickcheck","req":"^1.0.3","features":[],"optional":false,"default_features":false,"target":null,"kind":"dev","package":null},{"name":"regex-syntax","req":"^0.8.5","features":[],"optional":true,"default_features":false,"target":null,"kind":null,"package":null},{"name":"regex-test","req":"^0.1.0","features":[],"optional":false,"default_features":true,"target":null,"kind":"dev","package":null}],"cksum":"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908","features":{"alloc":[],"default":["dfa","hybrid","meta","nfa","perf","std","syntax","unicode"],"dfa":["dfa-build","dfa-onepass","dfa-search"],"dfa-build":["dfa-search","nfa-thompson"],"dfa-onepass":["nfa-thompson"],"dfa-search":[],"hybrid":["alloc","nfa-thompson"],"internal-instrument":["internal-instrument-pikevm"],"internal-instrument-pikevm":["logging","std"],"logging":["aho-corasick?/logging","dep:log","memchr?/logging"],"meta":["nfa-pikevm","syntax"],"nfa":["nfa-backtrack","nfa-pikevm","nfa-thompson"],"nfa-backtrack":["nfa-thompson"],"nfa-pikevm":["nfa-thompson"],"nfa-thompson":["alloc"],"perf":["perf-inline","perf-literal"],"perf-inline":[],"perf-literal":["perf-literal-multisubstring","perf-literal-substring"],"perf-literal-multisubstring":["dep:aho-corasick","std"],"perf-literal-substring":["aho-corasick?/perf-literal","dep:memchr"],"std":["aho-corasick?/std","alloc","memchr?/std","regex-syntax?/std"],"syntax":["alloc","dep:regex-syntax"],"unicode":["regex-syntax?/unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"unicode-age":["regex-syntax?/unicode-age"],"unicode-bool":["regex-syntax?/unicode-bool"],"unicode-case":["regex-syntax?/unicode-case"],"unicode-gencat":["regex-syntax?/unicode-gencat"],"unicode-perl":["regex-syntax?/unicode-perl"],"unicode-script":["regex-syntax?/unicode-script"],"unicode-segment":["regex-syntax?/unicode-segment"],"unicode-word-boundary":[]},"yanked":false}